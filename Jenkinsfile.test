env.DIST = 'xenial'
env.TYPE = 'user'
env.PWD_BIND = '/workspace'

// def in_container(body) {
//   container_id = sh(script: "docker create -v ${pwd}:/workspace ubuntu:xenial /bin/bash -c 'while true; do sleep infinity; done'", returnStdout: true).trim()
//   sh "echo $container_id"
//   sh "docker start $container_id"
//   try {
//     def contain = { args ->
//       params = args['env'] ? "-e ${args['env']}" : ''
//       cmd = args['cmd']
//       sh "echo \"docker exec $params $container_id $cmd\""
//       sh "docker exec $params $container_id $cmd"
//     }
//     body(contain)
//   } finally {
//     sh "docker kill $container_id"
//     sh "docker rm $container_id"
//   }
// }
//   in_container { contain ->
//     contain(cmd: "xxx")
  }

cleanNode('os-autoinst') {
  try {
    sh 'ifconfig'
    stage('tree[wget]') {
      sh "wget -q http://metadata.neon.kde.org/os-autoinst/${env.TYPE}.tar"
      sh "wget -q http://metadata.neon.kde.org/os-autoinst/${env.TYPE}.tar.sig"
    }
    parallel(
      "tree[verify]": {
        sh 'gpg2 --recv-keys "348C 8651 2066 33FD 983A  8FC4 DEAC EA00 075E 1D76"'
        sh 'gpg2 --verify ${TYPE}.tar.sig'
      },
      "tree[untar]": {
        sh 'tar -xf ${TYPE}.tar'
        sh 'ls -lah'
      }
    )
    stage('pull') {
      sh 'git branch --set-upstream-to=origin/master master'
      sh 'git pull'
    }
    stage('test-plasma_folder') {
      sh 'TESTS_TO_RUN=tests/plasma_folder.pm bin/contain.rb /workspace/bin/bootstrap.rb'
    }
  } finally {
    archiveArtifacts 'wok/testresults/*.png, wok/testresults/*.json, wok/ulogs/*, wok/video.ogv, wok/vars.json'
    junit 'junit/*'
    sh 'bin/contain.rb chown -R jenkins . || true'
  }
}

def cleanNode(label = null, body) {
  node(label) {
    try {
// Supremely bugged causing excessive slowdown in jenkins. not sure why.
// <org.jenkinsci.plugins.livescreenshot.LiveScreenshotBuildWrapper plugin="livescreenshot@1.4.5">
// <fullscreenFilename>screenshot.png</fullscreenFilename>
// <thumbnailFilename>screenshot-thumb.png</thumbnailFilename>
// </org.jenkinsci.plugins.livescreenshot.LiveScreenshotBuildWrapper>
      wrap([$class: 'AnsiColorBuildWrapper', colorMapName: 'xterm']) {
        wrap([$class: 'TimestamperBuildWrapper']) {
          body()
        }
      }
    } finally {
      cleanWs()
    }
  }
}
